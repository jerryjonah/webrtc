{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","sendToPeer","messageType","payload","socket","emit","socketID","id","createOffer","console","log","pc","offerToReceiveVideo","then","sdp","setLocalDescription","setRemoteDescription","desc","JSON","parse","textref","value","RTCSessionDescription","createAnswer","addCandidate","candidates","forEach","candidate","stringify","addIceCandidate","RTCIceCandidate","localVideoref","React","createRef","remoteVideoref","this","io","path","query","on","success","RTCPeerConnection","urls","onicecandidate","e","oniceconnectionstatechange","ontrack","current","srcObject","streams","navigator","mediaDevices","getUserMedia","video","stream","window","localStream","addStream","catch","style","width","height","margin","backgroundColor","ref","autoPlay","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.095ae037.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport io from 'socket.io-client'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.localVideoref = React.createRef()\n    this.remoteVideoref = React.createRef()\n\n    this.socket = null\n    this.candidates = []\n  }\n\n  componentDidMount(){\n\n    this.socket = io(\n      '/webrtcPeer',\n      {\n        path: '/webrtc',\n        query: {}\n      }\n    )\n\n    this.socket.on('connection-success', success => {\n      console.log(success)\n    })\n\n    this.socket.on('offerOrAnswer', (sdp) => {\n      this.textref.value = JSON.stringify(sdp)\n\n      // set sdp as remote description\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\n    })\n\n    this.socket.on('candidate', (candidate) => {\n      // console.log('From Peer... ', JSON.stringify(candidate))\n      // this.candidates = [...this.candidates, candidate]\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n    })\n\n    // const pc_config = null\n\n    const pc_config = {\n      \"iceServers\": [\n        // {\n        //   urls: 'stun:[STUN_IP]:[PORT]',\n        //   'credentials': '[YOR CREDENTIALS]',\n        //   'username': '[USERNAME]'\n        // },\n        {\n          urls : 'stun:stun.l.google.com:19302'\n        }\n      ]\n    }\n\n    this.pc = new RTCPeerConnection(pc_config)\n\n    this.pc.onicecandidate = (e) => {\n      if (e.candidate){\n        //console.log(JSON.stringify(e.candidate))\n        this.sendToPeer('candidate', e.candidate)\n      }\n    }\n\n    this.pc.oniceconnectionstatechange = (e) => {\n      console.log(e)\n    }\n\n    this.pc.ontrack = (e) => {\n      this.remoteVideoref.current.srcObject = e.streams[0]\n    }\n\n    const constraints = { video: true }\n\n    const success = (stream) => {\n      window.localStream = stream\n      this.localVideoref.current.srcObject = stream\n      this.pc.addStream(stream)\n    }\n\n    const failure = (e) => {\n      console.log('getUserMedia Error: ', e)\n    }\n\n    navigator.mediaDevices.getUserMedia( constraints ).then( success ).catch( failure )\n  }\n\n  sendToPeer = (messageType, payload) => {\n    this.socket.emit(messageType, {\n      socketID: this.socket.id,\n      payload\n    })\n  }\n\n  createOffer = () => {\n    console.log('offer')\n    this.pc.createOffer({offerToReceiveVideo: 1})\n      .then(sdp => {\n        // console.log(JSON.stringify(sdp))\n        this.pc.setLocalDescription(sdp)\n        this.sendToPeer('offerOrAnswer', sdp)\n      })\n  }\n\n  setRemoteDescription = () => {\n    const desc = JSON.parse(this.textref.value)\n    this.pc.setRemoteDescription(new RTCSessionDescription(desc))\n  }\n\n  createAnswer = () => {\n    console.log('Answer')\n    this.pc.createAnswer({offerToReceiveVideo: 1})\n      .then(sdp => {\n        // console.log(JSON.stringify(sdp))\n        this.pc.setLocalDescription(sdp)\n        this.sendToPeer('offerOrAnswer', sdp)\n      })\n  }\n\n  addCandidate = () => {\n    // const candidate = JSON.parse(this.textref.value)\n    // console.log('Adding candidate:', candidate)\n    // this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n    this.candidates.forEach(candidate => {\n      console.log(JSON.stringify(candidate))\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n    });\n  }\n\n  render() {\n\n    return(\n      <div>\n        <video\n          style={{\n            width: 240, height:240,\n            margin: 5, backgroundColor: 'black'\n          }}\n          ref={this.localVideoref}\n          autoPlay></video>\n          <video\n          style={{\n            width: 240, height:240,\n            margin: 5, backgroundColor: 'black'\n          }}\n          ref={this.remoteVideoref}\n          autoPlay></video>\n\n          <button onClick={this.createOffer}>Offer</button>\n          <button onClick={this.createAnswer}>Answer</button>\n          <br />\n          <textarea ref={ref => { this.textref = ref }}/>\n          {/* <br />\n          <button onClick={this.setRemoteDescription}>Set Remote Desc</button>\n          <button onClick={this.addCandidate}>Add Candidate</button> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}